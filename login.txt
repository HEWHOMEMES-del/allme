screens/LoginScreen.tsx
tsx
Copy
Edit
import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert, Platform } from 'react-native';
import * as Google from 'expo-auth-session/providers/google';
import * as AppleAuthentication from 'expo-apple-authentication';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { RootStackParamList } from '../navigation';

type Props = NativeStackScreenProps<RootStackParamList, 'Login'> & {
  onLogin: (role: string) => void;
};

export default function LoginScreen({ navigation, onLogin }: Props) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [role, setRole] = useState<'student' | 'parent' | 'teacher' | 'guest'>('student');

  // Google Auth config (fill with your clientId)
  const [request, response, promptAsync] = Google.useAuthRequest({
    expoClientId: '<YOUR_EXPO_CLIENT_ID>',
    iosClientId: '<YOUR_IOS_CLIENT_ID>',
    androidClientId: '<YOUR_ANDROID_CLIENT_ID>',
  });

  React.useEffect(() => {
    if (response?.type === 'success') {
      // Here you would verify tokens and fetch user info, then:
      onLogin(role);
    }
  }, [response]);

  const handleEmailLogin = () => {
    // TODO: Replace with real auth logic
    if (!email || !password) {
      Alert.alert('Error', 'Please enter email and password');
      return;
    }
    // Simulate login success
    onLogin(role);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Login</Text>

      <View style={styles.roleSelector}>
        {['student', 'parent', 'teacher', 'guest'].map(r => (
          <TouchableOpacity
            key={r}
            onPress={() => setRole(r as any)}
            style={[styles.roleButton, role === r && styles.roleButtonSelected]}
          >
            <Text style={[styles.roleText, role === r && styles.roleTextSelected]}>{r.charAt(0).toUpperCase() + r.slice(1)}</Text>
          </TouchableOpacity>
        ))}
      </View>

      <TextInput
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
        style={styles.input}
      />
      <TextInput
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        style={styles.input}
      />

      <TouchableOpacity style={styles.button} onPress={handleEmailLogin}>
        <Text style={styles.buttonText}>Login with Email</Text>
      </TouchableOpacity>

      <Text style={styles.or}>OR</Text>

      <TouchableOpacity
        disabled={!request}
        style={[styles.button, !request && { backgroundColor: '#aaa' }]}
        onPress={() => promptAsync()}
      >
        <Text style={styles.buttonText}>Login with Google</Text>
      </TouchableOpacity>

      {Platform.OS === 'ios' && AppleAuthentication.isAvailableAsync && (
        <AppleAuthentication.AppleAuthenticationButton
          buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
          buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
          cornerRadius={5}
          style={{ width: '100%', height: 44, marginTop: 10 }}
          onPress={async () => {
            try {
              const credential = await AppleAuthentication.signInAsync({
                requestedScopes: [
                  AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                  AppleAuthentication.AppleAuthenticationScope.EMAIL,
                ],
              });
              // Handle credential and login here
              onLogin(role);
            } catch (e) {
              if (e.code !== 'ERR_CANCELED') {
                Alert.alert('Apple Sign-In Error', e.message);
              }
            }
          }}
        />
      )}

      <TouchableOpacity style={styles.signupLink} onPress={() => navigation.navigate('Signup')}>
        <Text>Don't have an account? Sign up</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#eef2ff', justifyContent:'center' },
  title: { fontSize: 30, fontWeight: 'bold', textAlign:'center', marginBottom: 20, color:'#3f3fff' },
  input: { backgroundColor: 'white', padding: 12, borderRadius: 8, marginVertical: 8 },
  button: { backgroundColor: '#3f3fff', padding: 15, borderRadius: 8, marginTop: 10 },
  buttonText: { color: 'white', fontWeight: '600', textAlign: 'center' },
  or: { textAlign: 'center', marginVertical: 10, color: '#555' },
  signupLink: { marginTop: 20, alignItems: 'center' },
  roleSelector: { flexDirection: 'row', justifyContent: 'space-around', marginBottom: 15 },
  roleButton: { paddingVertical: 8, paddingHorizontal: 15, borderRadius: 20, backgroundColor: '#ccc' },
  roleButtonSelected: { backgroundColor: '#3f3fff' },
  roleText: { color: '#444', fontWeight: '500' },
  roleTextSelected: { color: 'white', fontWeight: '700' },
});