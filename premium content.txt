Step 1: Set up AsyncStorage for premium & trial status
bash
Copy
Edit
expo install @react-native-async-storage/async-storage
Step 2: Create premiumService.ts to manage premium & trial logic
ts
Copy
Edit
import AsyncStorage from '@react-native-async-storage/async-storage';

const PREMIUM_KEY = 'premium_status';
const TRIAL_START_KEY = 'trial_start_date';
const TRIAL_DAYS = 3;

export async function isPremiumUser(): Promise<boolean> {
  const status = await AsyncStorage.getItem(PREMIUM_KEY);
  return status === 'true';
}

export async function setPremiumUser() {
  await AsyncStorage.setItem(PREMIUM_KEY, 'true');
}

export async function startTrial() {
  const now = new Date().toISOString();
  await AsyncStorage.setItem(TRIAL_START_KEY, now);
}

export async function isTrialActive(): Promise<boolean> {
  const start = await AsyncStorage.getItem(TRIAL_START_KEY);
  if (!start) return false;

  const startDate = new Date(start);
  const now = new Date();
  const diffDays = (now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
  return diffDays < TRIAL_DAYS;
}

export async function clearTrial() {
  await AsyncStorage.removeItem(TRIAL_START_KEY);
}
Step 3: Use this in your app’s main content screens (e.g. lessons)
Example:

tsx
Copy
Edit
import React, { useEffect, useState } from 'react';
import { View, Text, Button, Alert } from 'react-native';
import { isPremiumUser, isTrialActive, startTrial } from '../services/premiumService';

export default function LessonsScreen() {
  const [hasAccess, setHasAccess] = useState(false);

  useEffect(() => {
    async function checkAccess() {
      const premium = await isPremiumUser();
      const trial = await isTrialActive();

      if (premium || trial) {
        setHasAccess(true);
      } else {
        setHasAccess(false);
      }
    }
    checkAccess();
  }, []);

  const startFreeTrial = async () => {
    await startTrial();
    setHasAccess(true);
    Alert.alert('Trial started', 'You have 3 days free access to premium content.');
  };

  if (!hasAccess) {
    return (
      <View style={{ padding: 20 }}>
        <Text style={{ fontSize: 18, marginBottom: 20 }}>
          You need premium access to view this content.
        </Text>
        <Button title="Start 3-Day Free Trial" onPress={startFreeTrial} />
        <Button title="Subscribe Now" onPress={() => {/* navigate to PaymentScreen */}} />
      </View>
    );
  }

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 22, fontWeight: 'bold' }}>Premium Lessons Content</Text>
      {/* Your lessons content here */}
    </View>
  );
}
Step 4: On successful payment, call setPremiumUser() to unlock permanently.
For example, in your PaymentScreen, after successful payment:

tsx
Copy
Edit
import { setPremiumUser } from '../services/premiumService';

// after payment success:
await setPremiumUser();
Step 5: Optional — Show trial countdown in the UI
tsx
Copy
Edit
import React, { useEffect, useState } from 'react';
import { Text } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

export function TrialCountdown() {
  const [daysLeft, setDaysLeft] = useState<number | null>(null);

  useEffect(() => {
    async function calculateDaysLeft() {
      const start = await AsyncStorage.getItem('trial_start_date');
      if (!start) return setDaysLeft(null);

      const startDate = new Date(start);
      const now = new Date();
      const diffMs = (startDate.getTime() + 3 * 24 * 60 * 60 * 1000) - now.getTime();
      const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
      setDaysLeft(diffDays > 0 ? diffDays : 0);
    }
    calculateDaysLeft();
  }, []);

  if (daysLeft === null) return null;

  return <Text style={{ color: 'red' }}>Trial days left: {daysLeft}</Text>;
}
Summary
Premium users have permanent access tracked by AsyncStorage.

Non-premium users can start a 3-day free trial once.

After trial expires, access is locked until payment.

Trial countdown can be displayed to keep user informed.